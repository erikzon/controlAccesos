"""Subclass of listadoFrame, which is generated by wxFormBuilder."""

import wx
import UI
import pymysql.cursors
import config
from ControlAccesosdetalleFrame import ControlAccesosdetalleFrame


# Implementing listadoFrame
class ControlAccesoslistadoFrame(UI.listadoFrame):
    def __init__(self, parent):
        UI.listadoFrame.__init__(self, parent)

    # Handlers for listadoFrame events.
    def listarUsuarios(self, event):
        try:
            connection = pymysql.connect(
                host="localhost",
                user=config.usuario_actual,
                password=config.contrasena_actual,
                database="accesos",
                cursorclass=pymysql.cursors.DictCursor,
            )
            with connection:
                with connection.cursor() as cursor:
                    sql = """SELECT u.idusuario, u.nombreCompleto, u.usuarioAD, a.nombre AS area, p.nombre AS pais
							FROM usuario u
							INNER JOIN area a ON u.area = a.idarea
							INNER JOIN pais p ON u.pais = p.idpais;"""
                    cursor.execute(sql)
            result = cursor.fetchall()

            if result:
                print(result)
                self.m_gridUsuarios.SetColLabelValue(0, "idusuario")
                self.m_gridUsuarios.SetColLabelValue(1, "nombreCompleto")
                self.m_gridUsuarios.SetColLabelValue(2, "usuarioAD")
                self.m_gridUsuarios.SetColLabelValue(3, "area")
                self.m_gridUsuarios.SetColLabelValue(4, "pais")
                for i, perro in enumerate(result):
                    self.m_gridUsuarios.SetCellValue(i, 0, str(perro["idusuario"]))
                    self.m_gridUsuarios.SetCellValue(i, 1, perro["nombreCompleto"])
                    self.m_gridUsuarios.SetCellValue(i, 2, perro["usuarioAD"])
                    self.m_gridUsuarios.SetCellValue(i, 3, perro["area"])
                    self.m_gridUsuarios.SetCellValue(i, 4, perro["pais"])
                self.m_gridUsuarios.AutoSizeColumns()

                # PROBANDO CON UN listcontroldelauber

                # Agregar columnas al DataViewListCtrl
                self.m_dataViewListCtrlUsuarios.AppendTextColumn(
                    "ID Usuario", "idusuario"
                )
                self.m_dataViewListCtrlUsuarios.AppendTextColumn(
                    "Nombre Completo", "nombreCompleto"
                )
                self.m_dataViewListCtrlUsuarios.AppendTextColumn(
                    "Usuario AD", "usuarioAD"
                )
                self.m_dataViewListCtrlUsuarios.AppendTextColumn("Área", "area")
                self.m_dataViewListCtrlUsuarios.AppendTextColumn("País", "pais")

                for j, miau in enumerate(result):
                    # print(result_row["nombreCompleto"])
                    self.m_dataViewListCtrlUsuarios.AppendItem(
                        [
                            str(miau["idusuario"]),
                            miau["nombreCompleto"],
                            miau["usuarioAD"],
                            miau["area"],
                            miau["pais"],
                        ]
                    )
                    # self.m_dataViewListCtrlUsuarios.AppendItem(
                    #     [
                    #         str(result_row["idusuario"]),
                    #         result_row["nombreCompleto"],
                    #         result_row["usuarioAD"],
                    #         result_row["area"],
                    #         result_row["pais"],
                    #     ]
                    # )

            else:
                print("Error al listarUsuarios")
        except Exception as e:
            print(f"Error en listarUsuarios: {str(e)}")

    def Buscar(self, event):
        # TODO: Implement Buscar
        pass

    def mostrarDetalle(self, event):
        selected_row = self.m_gridUsuarios.GetSelectedRows()[0]

        # Obtener el valor de la columna "usuarioAD" correspondiente a la fila seleccionada
        usuario_ad = self.m_gridUsuarios.GetCellValue(selected_row, 2)

        # Imprimir el valor obtenido
        print(usuario_ad)
        config.usuarioSeleccionado = usuario_ad
        self.Close()
        frame = ControlAccesosdetalleFrame(None)
        frame.Show(True)

    def CerrarSesion(self, event):
        from ControlAccesosautenticacionFrame import ControlAccesosautenticacionFrame

        config.limpiar()
        self.Close()
        frame = ControlAccesosautenticacionFrame(None)
        frame.Show(True)
